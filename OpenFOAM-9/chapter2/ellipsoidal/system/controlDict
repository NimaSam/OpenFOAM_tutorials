/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.25;

deltaT          1e-08;

writeControl    adjustableRunTime;

writeInterval   0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.2;

maxAlphaCo      0.2;

maxDeltaT       0.01;
// if swak4Foam is installed, make it uncomment
/*
libs (
    "libOpenFOAM.so" // keeps paraFoam happy
    "libsimpleSwakFunctionObjects.so" 
   );
*/
functions
{
  // if swak4Foam is installed, make it uncomment
  /*
  bubbleZ_swak
    {
        type swakExpression;
        valueType internalField;
        verbose true;
        aliases { alpha1 alpha.water; }
	variables (
	"Vol= sum (alpha1 < 0.5 ? vol() : 0);"
	"VolZ= sum (alpha1 < 0.5 ? pos().z*vol() : 0);"	
	);        
	expression "VolZ/Vol";
        accumulations (
		min		
        ); 
	outputControlMode  timeStep;
	outputInterval		1;
	writeStartTime    true;       
    }
    */

    bubbleZ_coded
    {
        libs        ("libutilityFunctionObjects.so");

        type coded;

        codeWrite
        #{
            // Lookup alpha1
            const volScalarField& alpha1 = mesh().lookupObject<volScalarField>("alpha.water");
            
            //access to mesh centers
            volScalarField Cz =mesh().C().component(vector::Z);
                        
            scalar vol= 0;
            scalar volZ= 0;
            forAll(alpha1, celli) {
            //include bubble cells!
            	if (alpha1[celli] < 0.5) {
            		vol +=mesh().V()[celli];
            		volZ +=mesh().V()[celli]*Cz[celli];
            	}  
            }
            
            // Write time and volume on terminal
            Info << "time= " << mesh().time().timeName() << " bubbleCenter= " << (volZ/vol) << endl;
            
            //TODO: you can also write it in a separate file!
        #};
    }

};










// ************************************************************************* //
