/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //  
convertToMeters 0.01;

// Cell numbers
nb  20; // Center Block (Square) 
nc  20; // Corner Lines
nz  10;  // Axial Pipe

// Mesh Clustering
rc  0.25; // Corner Lines 
irc #calc "1./$rc";  

// Geometry dimensions
Dp_x  4.25; // Major axis of ellipse
Dp_y  3.25; // Minor axis of ellipse
Lp  10;  // Pipe Length

Rx  #calc "0.5 * $Dp_x"; 
Ry  #calc "0.5 * $Dp_y"; 
Bf  0.5; // Center Block Fraction  

// Coordinate Calculations

//== Block Nodes
ble_x  #calc  "$Rx * $Bf";
ble_y  #calc  "$Ry * $Bf";
alf  #calc  "degToRad(45.0)";

bx1  #calc  "-1.0 * $ble_x * sin($alf)";  
by1  #calc  "-1.0 * $ble_y * cos($alf)";
bx2  #calc  "+1.0 * $ble_x * sin($alf)";  
by2  #calc  "-1.0 * $ble_y * cos($alf)";
bx3  #calc  "+1.0 * $ble_x * sin($alf)";  
by3  #calc  "+1.0 * $ble_y * cos($alf)";  
bx4  #calc  "-1.0 * $ble_x * sin($alf)";  
by4  #calc  "+1.0 * $ble_y * cos($alf)";

//== Corner Nodes
cx1  #calc  "-1.0 * $Rx * sin($alf)"; 
cy1  #calc  "-1.0 * $Ry * cos($alf)";
cx2  #calc  "+1.0 * $Rx * sin($alf)"; 
cy2  #calc  "-1.0 * $Ry * cos($alf)";
cx3  #calc  "+1.0 * $Rx * sin($alf)"; 
cy3  #calc  "+1.0 * $Ry * cos($alf)";
cx4  #calc  "-1.0 * $Rx * sin($alf)"; 
cy4  #calc  "+1.0 * $Ry * cos($alf)";

// Edge Nodes
ex1  0.0;
ey1  #calc  "-1.0 * $Ry";

ex2  #calc  "+1.0 * $Rx";
ey2  0.0;

ex3  0.0;
ey3  #calc  "+1.0 * $Ry";

ex4  #calc  "-1.0 * $Rx";
ey4  0.0;

// Axial Nodes
z1   0.0;
z2   #calc "$Lp";

vertices
(
   // Center Block
   ($bx1  $by1  $z1) // 0
   ($bx2  $by2  $z1) // 1 
   ($bx3  $by3  $z1) // 2 
   ($bx4  $by4  $z1) // 3
   ($bx1  $by1  $z2) // 4
   ($bx2  $by2  $z2) // 5 
   ($bx3  $by3  $z2) // 6 
   ($bx4  $by4  $z2) // 7

   // Corners
   ($cx1  $cy1  $z1) // 8 
   ($cx2  $cy2  $z1) // 9 
   ($cx1  $cy1  $z2) // 10
   ($cx2  $cy2  $z2) // 11
   ($cx3  $cy3  $z1) // 12
   ($cx4  $cy4  $z1) // 13
   ($cx3  $cy3  $z2) // 14
   ($cx4  $cy4  $z2) // 15
);

blocks
(
   // Center Block
   hex ( 0  1  2  3  4  5  6  7 ) center ($nb $nb $nz) simpleGrading (1 1 1)

   // Bottom Corner
   hex ( 8  9  1  0  10 11 5  4 ) corner ($nb $nc $nz) simpleGrading (1  $irc 1 )

   // Right Corner
   hex ( 9  12 2  1  11 14 6  5 ) corner ($nb $nc $nz) simpleGrading (1  $irc 1 )

   // Top Corner
   hex ( 12 13 3  2  14 15 7  6 ) corner ($nb $nc $nz) simpleGrading (1  $irc 1 )
 
   // Left Corner
   hex ( 13 8  0  3  15 10 4  7 ) corner ($nb $nc $nz) simpleGrading (1  $irc 1 )
);

edges
(
   // Corners 
   arc 8  9   ($ex1 $ey1 $z1)
   arc 10 11  ($ex1 $ey1 $z2)

   arc 9  12  ($ex2 $ey2 $z1)
   arc 11 14  ($ex2 $ey2 $z2)

   arc 12 13  ($ex3 $ey3 $z1)
   arc 14 15  ($ex3 $ey3 $z2)

   arc 13 8   ($ex4 $ey4 $z1)
   arc 15 10  ($ex4 $ey4 $z2)
);

boundary
(
   wall
   {
      type wall;
      faces 
      (
         ( 8  10 11 9  )
         ( 9  11 14 12 )
         ( 12 14 15 13 )
         ( 8  13 15 10 )     
      );
   }

   inlet
   {
      type patch;
      faces
      (
         ( 0 3  2  1 )
         ( 8 0  1  9 )
         ( 1 2  12 9 )
         ( 3 13 12 2 )
         ( 8 13 3  0 )
      );
   }

   outlet
   {
      type patch;
      faces
      (
         ( 4  5  6 7 )
         ( 10 11 5 4 )
         ( 11 14 6 5 )
         ( 14 15 7 6 )
         ( 15 10 4 7 )
      );
   }   
);

mergePatchPairs
(
);

// ************************************************************************* //

